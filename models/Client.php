<?php

namespace app\models;

use Yii;

/**
 * This is the model class for table "client".
 *
 * @property int $id
 * @property string $name Наименование
 * @property string $address Адрес
 * @property string $post_index Почтовый индекс
 * @property int $type Тип
 * @property string $created_at
 * @property string $inn ИНН
 * @property string $ogrn ОГРН
 * @property string $kpp КПП
 * @property string $official_address Юридический адрес
 * @property int $address_equals Фактический адрес совпадает с юридическим
 * @property string $director Генеральный директор
 * @property string $email Email
 * @property string $phone Телефон
 * @property string $site Сайт
 * @property string $bank_bik БИК/SWIFT
 * @property string $bank_name Наименование банка
 * @property string $bank_address Адрес банка
 * @property string $bank_correspondent_account Корреспондентский счёт
 * @property string $bank_register_number Регистрационный номер
 * @property string $bank_registration_date Дата регистрации
 * @property string $bank_payment_account Расчетный счет
 * @property array $contacts Контакты
 * @property ClientContact[] $clientContacts
 */
class Client extends \yii\db\ActiveRecord
{
    public $contacts;
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'client';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['type', 'address_equals'], 'integer'],
            [['created_at', 'bank_registration_date','contacts'], 'safe'],
            [['name', 'address', 'post_index', 'inn', 'ogrn', 'kpp', 'official_address', 'director', 'email', 'phone', 'site', 'bank_bik', 'bank_name', 'bank_address', 'bank_correspondent_account', 'bank_register_number', 'bank_payment_account'], 'string', 'max' => 255],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Наименование',
            'address' => 'Адрес',
            'post_index' => 'Почтовый индекс',
            'type' => 'Тип',
            'created_at' => 'Created At',
            'inn' => 'ИНН',
            'ogrn' => 'ОГРН',
            'kpp' => 'КПП',
            'official_address' => 'Юридический адрес',
            'address_equals' => 'Фактический адрес совпадает с юридическим',
            'director' => 'Генеральный директор',
            'email' => 'Email',
            'phone' => 'Телефон',
            'site' => 'Сайт',
            'bank_bik' => 'БИК/SWIFT',
            'bank_name' => 'Наименование банка',
            'bank_address' => 'Адрес банка',
            'bank_correspondent_account' => 'Корреспондентский счёт',
            'bank_register_number' => 'Регистрационный номер',
            'bank_registration_date' => 'Дата регистрации',
            'bank_payment_account' => 'Расчетный счет',
            'contacts' => 'Контактные лица организации'
        ];
    }
    public function afterSave($insert, $changedAttributes)
    {
        $contactAll = ClientContact::find()->where(['client_id' => $this->id,])->all();
        foreach ($contactAll as $item1) {
            $a = false;
            if ($this->contacts == null) {
                $item1->delete();
                continue;
            }
            foreach ($this->contacts as $item3) {
                if ($item3['id'] == $item1->id) {
                    $a = true;
                }
                if (!$a) {
                    $item1->delete();
                    break;
                }
            }
        }
        if ($this->contacts != null) {
            foreach ($this->contacts as $item) {
                $contact = ClientContact::find()->where(['id' => $item['id']])->one();

                if (!$contact) {
                    (new ClientContact([
                        'name' => $item['name'],
                        'position' => $item['position'],
                        'phone' => $item['phone'],
                        'email' => $item['email'],
                        'client_id' => $this->id,
                    ]))->save(false);
                }else{
                    $contact->name = $item['name'];
                    $contact->position = $item['position'];
                    $contact->phone = $item['phone'];
                    $contact->email = $item['email'];
                    $contact->save(false);
                }
            }

        }
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getClientContacts()
    {
        return $this->hasMany(ClientContact::className(), ['client_id' => 'id']);
    }

    /**
     * {@inheritdoc}
     * @return ClientQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new ClientQuery(get_called_class());
    }
}
